[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "intelligent-systems"
version = "1.0.0"
description = "Algorithms and demos for search, games, MDPs, and reinforcement learning"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CS 5368 Teaching Team"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Intended Audience :: Education",
    "Development Status :: 5 - Production/Stable",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "jupyter>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
viz = [
    "seaborn>=0.11.0",
    "networkx>=2.6.0",
    "pandas>=1.3.0",
]
all = [
    "intelligent-systems[dev,viz]",
]

[project.scripts]
is-pathfinding-demo = "applications.pathfinding_demo:run_pathfinding_demo"
is-game-demo = "applications.game_ai_demo:play_optimal_tictactoe"
is-game-human-demo = "applications.game_ai_demo:play_human_vs_ai"
is-mdp-demo = "applications.mdp_robot_navigation:analyse_robot_navigation"
is-rl-trader = "applications.reinforcement_learning_trader:train_trading_agent"
is-medical-bayes = "applications.medical_diagnosis_bayes:diagnose_patient"

[project.urls]
Homepage = "https://github.com/scott-weeden/automata-logic-intelligence"
Repository = "https://github.com/scott-weeden/automata-logic-intelligence"
Documentation = "https://github.com/scott-weeden/automata-logic-intelligence/tree/main/docs"
"Issue Tracker" = "https://github.com/scott-weeden/automata-logic-intelligence/issues"

[tool.setuptools.packages.find]
where = ["src", "applications"]
include = ["*"]

[tool.setuptools.package-dir]
"" = "src"
"applications" = "applications"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "applications"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "seaborn.*",
    "networkx.*",
    "scipy.*",
]
ignore_missing_imports = true