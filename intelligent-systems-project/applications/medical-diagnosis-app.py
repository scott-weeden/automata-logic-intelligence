"""
Medical Diagnosis System using Bayesian Networks
Demonstrates probabilistic reasoning for disease diagnosis
CS5368 Intelligent Systems - Real World Application
"""

import numpy as np
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from collections import defaultdict
import json


@dataclass
class Disease:
    """Represents a disease with its characteristics"""
    name: str
    prevalence: float  # Prior probability P(Disease)
    symptoms: Dict[str, float]  # P(Symptom|Disease)
    risk_factors: Dict[str, float]  # P(RiskFactor|Disease)
    
    def __repr__(self):
        return f"Disease('{self.name}', prevalence={self.prevalence:.3f})"


@dataclass
class Patient:
    """Represents a patient with symptoms and risk factors"""
    id: str
    symptoms: List[str]
    risk_factors: List[str]
    age: int
    gender: str
    
    def __repr__(self):
        return f"Patient('{self.id}', symptoms={len(self.symptoms)}, risks={len(self.risk_factors)})"


class MedicalDiagnosisSystem:
    """
    Bayesian medical diagnosis system
    Uses naive Bayes assumption for computational efficiency
    """
    
    def __init__(self):
        self.diseases = {}
        self.all_symptoms = set()
        self.all_risk_factors = set()
        self.symptom_prevalence = {}  # P(Symptom) in general population
        
        # Initialize with medical knowledge base
        self._initialize_knowledge_base()
    
    def _initialize_knowledge_base(self):
        """Initialize with common diseases and their characteristics"""
        
        # Common Cold
        self.add_disease(
            Disease(
                name="Common Cold",
                prevalence=0.15,  # 15% chance in general population
                symptoms={
                    "runny_nose": 0.90,
                    "sore_throat": 0.70,
                    "cough": 0.80,
                    "fatigue": 0.60,
                    "fever": 0.30,
                    "headache": 0.50,
                    "body_aches": 0.40
                },
                risk_factors={
                    "recent_exposure": 0.70,
                    "weakened_immune": 0.60,
                    "stress": 0.40
                }
            )
        )\n",
        \n",
        # Influenza (Flu)\n",
        self.add_disease(\n",
            Disease(\n",
                name=\"Influenza\",\n",
                prevalence=0.08,\n",
                symptoms={\n",
                    \"fever\": 0.95,\n",
                    \"body_aches\": 0.90,\n",
                    \"fatigue\": 0.95,\n",
                    \"cough\": 0.85,\n",
                    \"headache\": 0.80,\n",
                    \"sore_throat\": 0.60,\n",
                    \"runny_nose\": 0.50,\n",
                    \"chills\": 0.70\n",
                },\n",
                risk_factors={\n",
                    \"recent_exposure\": 0.80,\n",
                    \"no_vaccination\": 0.70,\n",
                    \"weakened_immune\": 0.80\n",
                }\n",
            )\n",
        )\n",
        \n",
        # COVID-19\n",
        self.add_disease(\n",
            Disease(\n",
                name=\"COVID-19\",\n",
                prevalence=0.05,\n",
                symptoms={\n",
                    \"fever\": 0.88,\n",
                    \"cough\": 0.68,\n",
                    \"fatigue\": 0.75,\n",
                    \"loss_of_taste\": 0.65,\n",
                    \"loss_of_smell\": 0.65,\n",
                    \"shortness_of_breath\": 0.40,\n",
                    \"body_aches\": 0.60,\n",
                    \"sore_throat\": 0.50,\n",
                    \"headache\": 0.65\n",
                },\n",
                risk_factors={\n",
                    \"recent_exposure\": 0.90,\n",
                    \"no_vaccination\": 0.60,\n",
                    \"travel_history\": 0.40,\n",
                    \"crowded_places\": 0.50\n",
                }\n",
            )\n",
        )\n",
        \n",
        # Strep Throat\n",
        self.add_disease(\n",
            Disease(\n",
                name=\"Strep Throat\",\n",
                prevalence=0.03,\n",
                symptoms={\n",
                    \"sore_throat\": 0.95,\n",
                    \"fever\": 0.80,\n",
                    \"swollen_lymph_nodes\": 0.70,\n",
                    \"difficulty_swallowing\": 0.85,\n",
                    \"headache\": 0.60,\n",
                    \"red_spots_throat\": 0.65,\n",
                    \"fatigue\": 0.50\n",
                },\n",
                risk_factors={\n",
                    \"recent_exposure\": 0.75,\n",
                    \"age_5_15\": 0.60,\n",
                    \"weakened_immune\": 0.50\n",
                }\n",
            )\n",
        )\n",
        \n",
        # Allergies\n",
        self.add_disease(\n",
            Disease(\n",
                name=\"Allergies\",\n",
                prevalence=0.20,\n",
                symptoms={\n",
                    \"runny_nose\": 0.90,\n",
                    \"sneezing\": 0.95,\n",
                    \"itchy_eyes\": 0.85,\n",
                    \"watery_eyes\": 0.80,\n",
                    \"cough\": 0.40,\n",
                    \"fatigue\": 0.30,\n",
                    \"headache\": 0.35\n",
                },\n",
                risk_factors={\n",
                    \"family_history\": 0.70,\n",
                    \"seasonal_pattern\": 0.80,\n",
                    \"environmental_triggers\": 0.90\n",
                }\n",
            )\n",
        )\n",
        \n",
        # Calculate symptom prevalence in general population\n",
        self._calculate_symptom_prevalence()\n",
    \n",
    def add_disease(self, disease: Disease):\n",
        \"\"\"Add a disease to the knowledge base\"\"\"\n",
        self.diseases[disease.name] = disease\n",
        self.all_symptoms.update(disease.symptoms.keys())\n",
        self.all_risk_factors.update(disease.risk_factors.keys())\n",
    \n",
    def _calculate_symptom_prevalence(self):\n",
        \"\"\"Calculate P(Symptom) using law of total probability\"\"\"\n",
        for symptom in self.all_symptoms:\n",
            prob = 0.0\n",
            for disease in self.diseases.values():\n",
                if symptom in disease.symptoms:\n",
                    prob += disease.prevalence * disease.symptoms[symptom]\n",
            # Add background probability for non-disease causes\n",
            prob += 0.05  # 5% chance of symptom from other causes\n",
            self.symptom_prevalence[symptom] = min(prob, 0.95)  # Cap at 95%\n",
    \n",
    def calculate_posterior(self, patient: Patient) -> Dict[str, float]:\n",
        \"\"\"\n",
        Calculate P(Disease|Symptoms) using Bayes' theorem\n",
        Assumes conditional independence of symptoms given disease (naive Bayes)\n",
        \"\"\"\n",
        posteriors = {}\n",
        \n",
        for disease_name, disease in self.diseases.items():\n",
            # Start with prior\n",
            log_prob = np.log(disease.prevalence)\n",
            \n",
            # Update based on observed symptoms\n",
            for symptom in patient.symptoms:\n",
                if symptom in disease.symptoms:\n",
                    # P(symptom|disease)\n",
                    p_symptom_given_disease = disease.symptoms[symptom]\n",
                else:\n",
                    # Symptom not associated with disease\n",
                    p_symptom_given_disease = 0.01  # Small probability\n",
                \n",
                log_prob += np.log(p_symptom_given_disease)\n",
            \n",
            # Account for absent symptoms (important for diagnosis)\n",
            for symptom in disease.symptoms:\n",
                if symptom not in patient.symptoms:\n",
                    # Symptom expected but not present\n",
                    p_no_symptom_given_disease = 1 - disease.symptoms[symptom]\n",
                    log_prob += np.log(p_no_symptom_given_disease)\n",
            \n",
            # Update based on risk factors\n",
            for risk_factor in patient.risk_factors:\n",
                if risk_factor in disease.risk_factors:\n",
                    log_prob += np.log(1 + disease.risk_factors[risk_factor])\n",
            \n",
            # Convert back from log probability\n",
            posteriors[disease_name] = np.exp(log_prob)\n",
        \n",
        # Normalize to get proper probabilities\n",
        total = sum(posteriors.values())\n",
        if total > 0:\n",
            posteriors = {k: v/total for k, v in posteriors.items()}\n",
        \n",
        # Add \"Other/Unknown\" category\n",
        known_prob = sum(posteriors.values())\n",
        posteriors[\"Other/Unknown\"] = max(0, 1 - known_prob)\n",
        \n",
        return posteriors\n",
    \n",
    def diagnose(self, patient: Patient, threshold: float = 0.1) -> List[Tuple[str, float]]:\n",
        \"\"\"\n",
        Provide diagnosis with confidence scores\n",
        Returns list of (disease, probability) tuples sorted by probability\n",
        \"\"\"\n",
        posteriors = self.calculate_posterior(patient)\n",
        \n",
        # Filter by threshold and sort\n",
        diagnoses = [(disease, prob) for disease, prob in posteriors.items() \n",
                     if prob >= threshold]\n",
        diagnoses.sort(key=lambda x: x[1], reverse=True)\n",
        \n",
        return diagnoses\n",
    \n",
    def explain_diagnosis(self, patient: Patient, disease_name: str) -> Dict:\n",
        \"\"\"\n",
        Explain why a particular diagnosis was made\n",
        \"\"\"\n",
        if disease_name not in self.diseases:\n",
            return {\"error\": \"Disease not in knowledge base\"}\n",
        \n",
        disease = self.diseases[disease_name]\n",
        explanation = {\n",
            \"disease\": disease_name,\n",
            \"base_prevalence\": disease.prevalence,\n",
            \"supporting_symptoms\": [],\n",
            \"missing_symptoms\": [],\n",
            \"supporting_risk_factors\": []\n",
        }\n",
        \n",
        # Find supporting symptoms\n",
        for symptom in patient.symptoms:\n",
            if symptom in disease.symptoms:\n",
                explanation[\"supporting_symptoms\"].append({\n",
                    \"symptom\": symptom,\n",
                    \"likelihood\": disease.symptoms[symptom]\n",
                })\n",
        \n",
        # Find missing key symptoms\n",
        for symptom, likelihood in disease.symptoms.items():\n",
            if likelihood > 0.7 and symptom not in patient.symptoms:\n",
                explanation[\"missing_symptoms\"].append({\n",
                    \"symptom\": symptom,\n",
                    \"expected_likelihood\": likelihood\n",
                })\n",
        \n",
        # Find supporting risk factors\n",
        for risk in patient.risk_factors:\n",
            if risk in disease.risk_factors:\n",
                explanation[\"supporting_risk_factors\"].append({\n",
                    \"factor\": risk,\n",
                    \"relevance\": disease.risk_factors[risk]\n",
                })\n",
        \n",
        return explanation\n",
    \n",
    def recommend_tests(self, patient: Patient, diagnoses: List[Tuple[str, float]]) -> List[str]:\n",
        \"\"\"\n",
        Recommend medical tests based on differential diagnosis\n",
        \"\"\"\n",
        recommendations = []\n",
        \n",
        if not diagnoses:\n",
            return [\"General health checkup recommended\"]\n",
        \n",
        top_diagnosis = diagnoses[0][0]\n",
        confidence = diagnoses[0][1]\n",
        \n",
        # Low confidence - need more information\n",
        if confidence < 0.5:\n",
            recommendations.append(\"Complete blood count (CBC)\")\n",
            recommendations.append(\"Comprehensive metabolic panel\")\n",
        \n",
        # Disease-specific tests\n",
        if \"COVID-19\" in [d[0] for d in diagnoses[:3]]:\n",
            recommendations.append(\"COVID-19 PCR test\")\n",
        \n",
        if \"Strep Throat\" in [d[0] for d in diagnoses[:3]]:\n",
            recommendations.append(\"Rapid strep test\")\n",
            recommendations.append(\"Throat culture\")\n",
        \n",
        if \"Influenza\" in [d[0] for d in diagnoses[:3]]:\n",
            recommendations.append(\"Rapid influenza diagnostic test\")\n",
        \n",
        if \"Allergies\" in [d[0] for d in diagnoses[:3]]:\n",
            recommendations.append(\"Allergy skin test\")\n",
            recommendations.append(\"IgE blood test\")\n",
        \n",
        return recommendations\n",
\n",
\n",
def interactive_diagnosis():\n",
    \"\"\"\n",
    Interactive medical diagnosis session\n",
    \"\"\"\n",
    system = MedicalDiagnosisSystem()\n",
    \n",
    print(\"=\"*60)\n",
    print(\" Medical Diagnosis System (Educational Demo)\")\n",
    print(\"=\"*60)\n",
    print(\"\\nDISCLAIMER: This is for educational purposes only.\")\n",
    print(\"Always consult a healthcare professional for medical advice.\\n\")\n",
    \n",
    # Get patient information\n",
    patient_id = input(\"Patient ID (or name): \")\n",
    age = int(input(\"Patient age: \"))\n",
    gender = input(\"Patient gender (M/F/Other): \")\n",
    \n",
    print(\"\\nAvailable symptoms:\")\n",
    symptoms_list = sorted(system.all_symptoms)\n",
    for i, symptom in enumerate(symptoms_list, 1):\n",
        print(f\"{i:2}. {symptom.replace('_', ' ').title()}\")\n",
    \n",
    print(\"\\nEnter symptom numbers (comma-separated, or 0 when done): \")\n",
    patient_symptoms = []\n",
    symptom_input = input().strip()\n",
    if symptom_input and symptom_input != '0':\n",
        indices = [int(x.strip())-1 for x in symptom_input.split(',')]\n",
        patient_symptoms = [symptoms_list[i] for i in indices if 0 <= i < len(symptoms_list)]\n",
    \n",
    print(\"\\nRisk factors:\")\n",
    risk_list = sorted(system.all_risk_factors)\n",
    for i, risk in enumerate(risk_list, 1):\n",
        print(f\"{i:2}. {risk.replace('_', ' ').title()}\")\n",
    \n",
    print(\"\\nEnter risk factor numbers (comma-separated, or 0 when done): \")\n",
    patient_risks = []\n",
    risk_input = input().strip()\n",
    if risk_input and risk_input != '0':\n",
        indices = [int(x.strip())-1 for x in risk_input.split(',')]\n",
        patient_risks = [risk_list[i] for i in indices if 0 <= i < len(risk_list)]\n",
    \n",
    # Create patient\n",
    patient = Patient(\n",
        id=patient_id,\n",
        symptoms=patient_symptoms,\n",
        risk_factors=patient_risks,\n",
        age=age,\n",
        gender=gender\n",
    )\n",
    \n",
    print(\"\\n\" + \"=\"*60)\n",
    print(\" Diagnosis Results\")\n",
    print(\"=\"*60)\n",
    \n",
    # Get diagnosis\n",
    diagnoses = system.diagnose(patient, threshold=0.05)\n",
    \n",
    print(\"\\nDifferential Diagnosis:\")\n",
    print(\"-\"*40)\n",
    for disease, probability in diagnoses[:5]:  # Top 5\n",
        confidence = \"High\" if probability > 0.7 else \"Medium\" if probability > 0.3 else \"Low\"\n",
        print(f\"{disease:20} {probability:6.1%} [{confidence}]\")\n",
    \n",
    # Explain top diagnosis\n",
    if diagnoses:\n",
        top_disease = diagnoses[0][0]\n",
        if top_disease != \"Other/Unknown\":\n",
            print(\"\\nExplanation for top diagnosis:\")\n",
            print(\"-\"*40)\n",
            explanation = system.explain_diagnosis(patient, top_disease)\n",
            \n",
            print(f\"Disease: {explanation['disease']}\")\n",
            print(f\"Base prevalence: {explanation['base_prevalence']:.1%}\")\n",
            \n",
            if explanation['supporting_symptoms']:\n",
                print(\"\\nSupporting symptoms:\")\n",
                for item in explanation['supporting_symptoms']:\n",
                    print(f\"  • {item['symptom'].replace('_', ' ').title()} \"\n",
                          f\"(likelihood: {item['likelihood']:.1%})\")\n",
            \n",
            if explanation['missing_symptoms']:\n",
                print(\"\\nKey symptoms NOT present:\")\n",
                for item in explanation['missing_symptoms']:\n",
                    print(f\"  • {item['symptom'].replace('_', ' ').title()} \"\n",
                          f\"(expected: {item['expected_likelihood']:.1%})\")\n",
    \n",
    # Recommend tests\n",
    print(\"\\nRecommended Tests:\")\n",
    print(\"-\"*40)\n",
    recommendations = system.recommend_tests(patient, diagnoses)\n",
    for i, test in enumerate(recommendations, 1):\n",
        print(f\"{i}. {test}\")\n",
    \n",
    print(\"\\n\" + \"=\"*60)\n",
    print(\"Remember: This is an educational tool only.\")\n",
    print(\"Please consult a healthcare professional.\")\n",
    print(\"=\"*60)\n",
\n",
\n",
def run_example_cases():\n",
    \"\"\"\n",
    Run example diagnostic cases\n",
    \"\"\"\n",
    system = MedicalDiagnosisSystem()\n",
    \n",
    # Example cases\n",
    cases = [\n",
        Patient(\n",
            id=\"Case001\",\n",
            symptoms=[\"fever\", \"cough\", \"loss_of_taste\", \"loss_of_smell\"],\n",
            risk_factors=[\"recent_exposure\"],\n",
            age=35,\n",
            gender=\"M\"\n",
        ),\n",
        Patient(\n",
            id=\"Case002\",\n",
            symptoms=[\"runny_nose\", \"sneezing\", \"itchy_eyes\"],\n",
            risk_factors=[\"seasonal_pattern\"],\n",
            age=28,\n",
            gender=\"F\"\n",
        ),\n",
        Patient(\n",
            id=\"Case003\",\n",
            symptoms=[\"sore_throat\", \"fever\", \"difficulty_swallowing\"],\n",
            risk_factors=[\"recent_exposure\"],\n",
            age=12,\n",
            gender=\"M\"\n",
        )\n",
    ]\n",
    \n",
    print(\"Example Diagnostic Cases\")\n",
    print(\"=\"*60)\n",
    \n",
    for patient in cases:\n",
        print(f\"\\n{patient}\")\n",
        print(\"-\"*40)\n",
        print(f\"Symptoms: {', '.join(patient.symptoms)}\")\n",
        print(f\"Risk factors: {', '.join(patient.risk_factors)}\")\n",
        \n",
        diagnoses = system.diagnose(patient)\n",
        print(\"\\nTop 3 diagnoses:\")\n",
        for disease, prob in diagnoses[:3]:\n",
            print(f\"  {disease:20} {prob:6.1%}\")\n",
\n",
\n",
if __name__ == \"__main__\":\n",
    import sys\n",
    \n",
    if len(sys.argv) > 1 and sys.argv[1] == \"--examples\":\n",
        run_example_cases()\n",
    else:\n",
        interactive_diagnosis()